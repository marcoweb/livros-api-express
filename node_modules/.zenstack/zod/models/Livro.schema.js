"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LivroUpdateSchema = exports.LivroUpdateScalarSchema = exports.LivroCreateSchema = exports.LivroCreateScalarSchema = exports.LivroPrismaUpdateSchema = exports.LivroPrismaCreateSchema = exports.LivroSchema = exports.LivroScalarSchema = void 0;
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    titulo: zod_1.z.string().min(1).max(256),
}).strict();
const relationSchema = zod_1.z.object({
    genero: zod_1.z.record(zod_1.z.unknown()),
});
const fkSchema = zod_1.z.object({
    generoId: zod_1.z.string(),
});
/**
 * `Livro` schema excluding foreign keys and relations.
 */
exports.LivroScalarSchema = baseSchema;
/**
 * `Livro` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.LivroSchema = exports.LivroScalarSchema.merge(fkSchema).merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.LivroPrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.LivroPrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    titulo: zod_1.z.string().min(1).max(256)
}).partial().passthrough();
/**
 * `Livro` schema for create operations excluding foreign keys and relations.
 */
exports.LivroCreateScalarSchema = baseSchema.partial({
    id: true
});
/**
 * `Livro` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.LivroCreateSchema = exports.LivroCreateScalarSchema.merge(fkSchema);
/**
 * `Livro` schema for update operations excluding foreign keys and relations.
 */
exports.LivroUpdateScalarSchema = baseSchema.partial();
/**
 * `Livro` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.LivroUpdateSchema = exports.LivroUpdateScalarSchema.merge(fkSchema.partial());
