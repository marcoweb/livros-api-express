"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneroUpdateSchema = exports.GeneroUpdateScalarSchema = exports.GeneroCreateSchema = exports.GeneroCreateScalarSchema = exports.GeneroPrismaUpdateSchema = exports.GeneroPrismaCreateSchema = exports.GeneroSchema = exports.GeneroScalarSchema = void 0;
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    nome: zod_1.z.string().min(1).max(100),
}).strict();
const relationSchema = zod_1.z.object({
    livros: zod_1.z.array(zod_1.z.unknown()).optional(),
});
/**
 * `Genero` schema excluding foreign keys and relations.
 */
exports.GeneroScalarSchema = baseSchema;
/**
 * `Genero` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.GeneroSchema = exports.GeneroScalarSchema.merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.GeneroPrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.GeneroPrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    nome: zod_1.z.string().min(1).max(100)
}).partial().passthrough();
/**
 * `Genero` schema for create operations excluding foreign keys and relations.
 */
exports.GeneroCreateScalarSchema = baseSchema.partial({
    id: true
});
/**
 * `Genero` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.GeneroCreateSchema = baseSchema.partial({
    id: true
});
/**
 * `Genero` schema for update operations excluding foreign keys and relations.
 */
exports.GeneroUpdateScalarSchema = baseSchema.partial();
/**
 * `Genero` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.GeneroUpdateSchema = exports.GeneroUpdateScalarSchema;
