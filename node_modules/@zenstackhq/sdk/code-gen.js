"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProject = createProject;
exports.saveSourceFile = saveSourceFile;
exports.saveProject = saveProject;
exports.emitProject = emitProject;
const ts_morph_1 = require("ts-morph");
const package_json_1 = __importDefault(require("./package.json"));
const types_1 = require("./types");
/**
 * Creates a TS code generation project
 */
function createProject(options) {
    return new ts_morph_1.Project({
        compilerOptions: Object.assign({ target: ts_morph_1.ScriptTarget.ES2016, module: ts_morph_1.ModuleKind.CommonJS, esModuleInterop: true, declaration: true, strict: true, skipLibCheck: true, noEmitOnError: true, noImplicitAny: false }, options),
    });
}
function saveSourceFile(sourceFile) {
    sourceFile.replaceWithText(`/******************************************************************************
* This file was generated by ZenStack CLI ${package_json_1.default.version}.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

    ${sourceFile.getText()}`);
    sourceFile.formatText();
    sourceFile.saveSync();
}
/**
 * Persists a TS project to disk.
 */
function saveProject(project) {
    return __awaiter(this, void 0, void 0, function* () {
        project.getSourceFiles().forEach(saveSourceFile);
        yield project.save();
    });
}
/**
 * Emit a TS project to JS files.
 */
function emitProject(project) {
    return __awaiter(this, void 0, void 0, function* () {
        const errors = project.getPreEmitDiagnostics().filter((d) => d.getCategory() === ts_morph_1.DiagnosticCategory.Error);
        if (errors.length > 0) {
            console.error('Error compiling generated code:');
            console.error(project.formatDiagnosticsWithColorAndContext(errors.slice(0, 10)));
            yield project.save();
            throw new types_1.PluginError('', `Error compiling generated code`);
        }
        const result = yield project.emit();
        const emitErrors = result.getDiagnostics().filter((d) => d.getCategory() === ts_morph_1.DiagnosticCategory.Error);
        if (emitErrors.length > 0) {
            console.error('Some generated code is not emitted:');
            console.error(project.formatDiagnosticsWithColorAndContext(emitErrors.slice(0, 10)));
            yield project.save();
            throw new types_1.PluginError('', `Error emitting generated code`);
        }
    });
}
//# sourceMappingURL=code-gen.js.map